module receiver (
    input CLOCK_50,       // System Clock
    input UART_RXD,       // UART Receive line
    output [0:0] LEDG     // Green LED output
);

    wire [7:0] rx_data;   // Data received
    wire rx_ready;        // Signal indicating data is ready

    // UART Receiver Module
    uart_rx receiver_inst (
        .clk(CLOCK_50),
        .rx_line(UART_RXD),
        .rx_data(rx_data),
        .rx_ready(rx_ready)
    );

    // LED Control Logic
    reg led_state;
    always @(posedge CLOCK_50) begin
        if (rx_ready) begin
            led_state <= rx_data[0]; // Update LED state based on received data
        end
    end

    // Assign LED output
    assign LEDG[0] = led_state;

endmodule

module uart_rx (
    input clk,              // System clock
    input rx_line,          // UART receive line
    output reg [7:0] rx_data,  // Received data
    output reg rx_ready      // Signal indicating data is ready
);

    parameter CLOCK_RATE = 50_000_000;   // System clock frequency
    parameter BAUD_RATE = 9600;         // Baud rate for UART
    localparam CLOCK_DIVIDE = CLOCK_RATE / (BAUD_RATE * 16); // Clock divide factor for baud generation

    reg [3:0] bit_count;    // Counts the received bits
    reg [9:0] baud_count;   // Counter for baud rate timing
    reg [7:0] shift_reg;    // Shift register to store received bits
    reg receiving;          // Indicates if the module is receiving data

    always @(posedge clk) begin
        // Detect start bit
        if (!receiving && !rx_line) begin
            receiving <= 1'b1;
            bit_count <= 4'd0;
            baud_count <= CLOCK_DIVIDE >> 1; // Start in the middle of the start bit
            rx_ready <= 1'b0;
        end

        if (receiving) begin
            if (baud_count == CLOCK_DIVIDE) begin
                baud_count <= 10'd0;
                if (bit_count < 8) begin
                    // Shift in received bits
                    shift_reg <= {rx_line, shift_reg[7:1]};
                    bit_count <= bit_count + 1'b1;
                end else if (bit_count == 8) begin
                    // Stop bit
                    rx_data <= shift_reg;
                    rx_ready <= 1'b1;
                    receiving <= 1'b0;
                end
            end else begin
                baud_count <= baud_count + 1'b1;
            end
        end
    end

endmodule


