module transmitter (
    input CLOCK_50,  // System Clock
    input [0:0] SW,  // Switch input
    output UART_TXD  // UART Transmit line
);

    wire tx_busy;
    reg [7:0] tx_data;
    reg tx_start;

    // UART Transmitter Module
    uart_tx transmitter_inst (
        .clk(CLOCK_50),
        .tx_start(tx_start),
        .tx_data(tx_data),
        .tx_line(UART_TXD),
        .tx_busy(tx_busy)
    );

    // State machine to control transmission
    reg prev_sw_state;
    always @(posedge CLOCK_50) begin
        prev_sw_state <= SW[0];

        // Detect switch state change
        if (SW[0] != prev_sw_state && !tx_busy) begin
            tx_start <= 1'b1;
        end else begin
            tx_start <= 1'b0;
        end
    end

endmodule

module uart_tx (
    input clk,                 // System clock
    input tx_start,            // Start transmission signal
    input [7:0] tx_data,       // Data to be transmitted
    output reg tx_line,        // UART transmit line
    output reg tx_busy         // Indicates if the transmitter is busy
);

    parameter CLOCK_RATE = 50_000_000;   // System clock frequency
    parameter BAUD_RATE = 9600;         // Baud rate for UART
    localparam CLOCK_DIVIDE = CLOCK_RATE / BAUD_RATE; // Clock divide factor for baud rate

    reg [3:0] bit_count;       // Counts the bits being transmitted
    reg [7:0] shift_reg;       // Holds data to be transmitted
    reg [9:0] baud_count;      // Counter for baud rate timing

    always @(posedge clk) begin
        if (!tx_busy && tx_start) begin
            // Start transmission
            tx_busy <= 1'b1;          // Set busy flag
            shift_reg <= tx_data;     // Load data into shift register
            bit_count <= 4'd0;        // Reset bit count
            tx_line <= 1'b0;          // Start bit
            baud_count <= 10'd0;      // Reset baud count
        end else if (tx_busy) begin
            // Handle baud rate timing
            if (baud_count == CLOCK_DIVIDE - 1) begin
                baud_count <= 10'd0;  // Reset baud count
                if (bit_count < 8) begin
                    // Transmit data bits
                    tx_line <= shift_reg[0];            // Output LSB
                    shift_reg <= {1'b0, shift_reg[7:1]}; // Shift data
                    bit_count <= bit_count + 1'b1;      // Increment bit count
                end else if (bit_count == 8) begin
                    // Transmit stop bit
                    tx_line <= 1'b1;                   // Stop bit
                    bit_count <= bit_count + 1'b1;
                end else begin
                    // End transmission
                    tx_busy <= 1'b0;                   // Clear busy flag
                end
            end else begin
                baud_count <= baud_count + 1'b1;       // Increment baud count
            end
        end
    end

endmodule

